use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi, LockFlags};
use crate::system::kernel_modules::auth::{MethodAuthorization, MethodAuthorizationError};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::types::{Address, PackageOffset, RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::data::ScryptoValue;

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    InvalidIndex(u32),
    Unauthorized(MethodAuthorization, MethodAuthorizationError),
    UnauthorizedSetMethodAccessRules(AccessRuleKey, MethodAuthorization, MethodAuthorizationError),
    UnauthorizedSetGroupAccessRules(String, MethodAuthorization, MethodAuthorizationError),
    ProtectedMethod(AccessRuleKey),
}

#[derive(ScryptoSbor, LegacyDescribe)]
enum AccessRulesSetRuleEvent {
    Method {
        index: u32,
        key: AccessRuleKey,
        rule: AccessRuleEntry,
    },
    Group {
        index: u32,
        name: String,
        rule: AccessRule,
    },
}

#[derive(ScryptoSbor, LegacyDescribe)]
enum AccessRulesSetMutabilityEvent {
    Method {
        index: u32,
        key: AccessRuleKey,
        mutability: AccessRule,
    },
    Group {
        index: u32,
        name: String,
        mutability: AccessRule,
    },
}

pub struct AccessRulesNativePackage;
impl AccessRulesNativePackage {
    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<MethodReceiver>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_ADD_ACCESS_CHECK_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::add_access_check(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_mutability(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_mutability(receiver, input, api)
            }
            ACCESS_RULES_GET_LENGTH_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::get_length(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn add_access_check<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesAddAccessCheckInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        // Abi checks
        {
            let handle = api.kernel_lock_substate(
                receiver.0,
                NodeModuleId::TypeInfo,
                SubstateOffset::TypeInfo(TypeInfoOffset::TypeInfo),
                LockFlags::read_only(),
            )?;

            let (package_id, blueprint_name) = {
                let substate_ref = api.kernel_get_substate_ref(handle)?;
                let component_info = substate_ref.component_info();
                let package_address = component_info.package_address;
                let blueprint_name = component_info.blueprint_name.to_owned();
                (
                    RENodeId::Global(Address::Package(package_address)),
                    blueprint_name,
                )
            };

            let package_offset = SubstateOffset::Package(PackageOffset::Info);
            let handle = api.kernel_lock_substate(
                package_id,
                NodeModuleId::SELF,
                package_offset,
                LockFlags::read_only(),
            )?;
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let package = substate_ref.package_info();
            let blueprint_abi = package.blueprint_abi(&blueprint_name).unwrap_or_else(|| {
                panic!(
                    "Blueprint {} is not found in package node {:?}",
                    blueprint_name, package_id
                )
            });

            // TODO: Should we check all other module methods or should we even make this check?
            for (key, _) in input.access_rules.get_all_method_auth() {
                if let AccessRuleKey {
                    node_module_id: NodeModuleId::SELF,
                    method_ident,
                } = key
                {
                    if !blueprint_abi.contains_fn(method_ident.as_str()) {
                        return Err(RuntimeError::ApplicationError(
                            ApplicationError::AccessRulesChainError(
                                AccessRulesChainError::BlueprintFunctionNotFound(
                                    method_ident.to_string(),
                                ),
                            ),
                        ));
                    }
                }
            }
        }

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let mut substate_ref_mut = api.kernel_get_substate_ref_mut(handle)?;
        let substate = substate_ref_mut.access_rules_chain();
        substate.access_rules_chain.push(input.access_rules);

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_method_access_rule<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        // TODO: Should this invariant be enforced in a more static/structural way?
        if matches!(
            input.key,
            AccessRuleKey {
                node_module_id: NodeModuleId::AccessRules,
                ..
            }
        ) || matches!(
            input.key,
            AccessRuleKey {
                node_module_id: NodeModuleId::AccessRules1,
                ..
            }
        ) {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::AccessRulesChainError(AccessRulesChainError::ProtectedMethod(
                    input.key,
                )),
            ));
        }

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let authorization = {
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let access_rules_substate = substate_ref.access_rules_chain();
            access_rules_substate.method_mutability_authorization(&input.key)
        };

        // Manual Auth
        {
            let offset = SubstateOffset::AuthZoneStack(AuthZoneStackOffset::AuthZoneStack);
            let handle = api.kernel_lock_substate(
                RENodeId::AuthZoneStack,
                NodeModuleId::SELF,
                offset,
                LockFlags::read_only(),
            )?;
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let auth_zone_stack = substate_ref.auth_zone_stack();

            auth_zone_stack.check_auth(false, authorization).map_err(
                |(authorization, error)| {
                    RuntimeError::ApplicationError(ApplicationError::AccessRulesChainError(
                        AccessRulesChainError::UnauthorizedSetMethodAccessRules(
                            input.key.clone(),
                            authorization,
                            error,
                        ),
                    ))
                },
            )?;
        }

        let mut substate_ref_mut = api.kernel_get_substate_ref_mut(handle)?;
        let substate = substate_ref_mut.access_rules_chain();
        let access_rules_chain = &mut substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_chain
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_method_access_rule(input.key.clone(), input.rule.clone());

        api.emit_event(AccessRulesSetRuleEvent::Method {
            index: input.index,
            key: input.key,
            rule: input.rule,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_access_rule<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let authorization = {
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let access_rules_substate = substate_ref.access_rules_chain();
            access_rules_substate.group_mutability_authorization(&input.name)
        };

        // Manual Auth
        {
            let offset = SubstateOffset::AuthZoneStack(AuthZoneStackOffset::AuthZoneStack);
            let handle = api.kernel_lock_substate(
                RENodeId::AuthZoneStack,
                NodeModuleId::SELF,
                offset,
                LockFlags::read_only(),
            )?;
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let auth_zone_substate = substate_ref.auth_zone_stack();

            auth_zone_substate
                .check_auth(false, authorization)
                .map_err(|(authorization, error)| {
                    RuntimeError::ApplicationError(ApplicationError::AccessRulesChainError(
                        AccessRulesChainError::UnauthorizedSetGroupAccessRules(
                            input.name.clone(),
                            authorization,
                            error,
                        ),
                    ))
                })?;
        }

        let mut substate_ref_mut = api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_substate = substate_ref_mut.access_rules_chain();
        let access_rules_list = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_list
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_group_access_rule(input.name.clone(), input.rule.clone());

        api.emit_event(AccessRulesSetRuleEvent::Group {
            index: input.index,
            name: input.name,
            rule: input.rule,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_method_mutability<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        // TODO: Should this invariant be enforced in a more static/structural way?
        if matches!(
            input.key,
            AccessRuleKey {
                node_module_id: NodeModuleId::AccessRules,
                ..
            }
        ) || matches!(
            input.key,
            AccessRuleKey {
                node_module_id: NodeModuleId::AccessRules1,
                ..
            }
        ) {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::AccessRulesChainError(AccessRulesChainError::ProtectedMethod(
                    input.key,
                )),
            ));
        }

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let authorization = {
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let access_rules_substate = substate_ref.access_rules_chain();
            access_rules_substate.method_mutability_authorization(&input.key)
        };

        // Manual Auth
        {
            let offset = SubstateOffset::AuthZoneStack(AuthZoneStackOffset::AuthZoneStack);
            let handle = api.kernel_lock_substate(
                RENodeId::AuthZoneStack,
                NodeModuleId::SELF,
                offset,
                LockFlags::read_only(),
            )?;
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let auth_zone_stack = substate_ref.auth_zone_stack();

            auth_zone_stack.check_auth(false, authorization).map_err(
                |(authorization, error)| {
                    RuntimeError::ApplicationError(ApplicationError::AccessRulesChainError(
                        AccessRulesChainError::Unauthorized(authorization, error),
                    ))
                },
            )?;
        }

        let mut substate_ref_mut = api.kernel_get_substate_ref_mut(handle)?;
        let substate = substate_ref_mut.access_rules_chain();
        let access_rules_chain = &mut substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_chain
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_mutability(input.key.clone(), input.mutability.clone());

        api.emit_event(AccessRulesSetMutabilityEvent::Method {
            index: input.index,
            key: input.key,
            mutability: input.mutability,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_mutability<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let authorization = {
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let access_rules_substate = substate_ref.access_rules_chain();
            access_rules_substate.group_mutability_authorization(&input.name)
        };

        // Manual Auth
        {
            let offset = SubstateOffset::AuthZoneStack(AuthZoneStackOffset::AuthZoneStack);
            let handle = api.kernel_lock_substate(
                RENodeId::AuthZoneStack,
                NodeModuleId::SELF,
                offset,
                LockFlags::read_only(),
            )?;
            let substate_ref = api.kernel_get_substate_ref(handle)?;
            let auth_zone_substate = substate_ref.auth_zone_stack();

            auth_zone_substate
                .check_auth(false, authorization)
                .map_err(|(authorization, error)| {
                    RuntimeError::ApplicationError(ApplicationError::AccessRulesChainError(
                        AccessRulesChainError::Unauthorized(authorization, error),
                    ))
                })?;
        }

        let mut substate_ref_mut = api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_substate = substate_ref_mut.access_rules_chain();
        let access_rules_list = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_list
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_group_mutability(input.name.clone(), input.mutability.clone());

        api.emit_event(AccessRulesSetMutabilityEvent::Group {
            index: input.index,
            name: input.name,
            mutability: input.mutability,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get_length<Y>(
        receiver: MethodReceiver,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let _input: AccessRulesGetLengthInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver.0,
            receiver.1,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let substate_ref = api.kernel_get_substate_ref(handle)?;
        let access_rules_substate = substate_ref.access_rules_chain();

        let len = access_rules_substate.access_rules_chain.len() as u32;
        Ok(IndexedScryptoValue::from_typed(&len))
    }
}
