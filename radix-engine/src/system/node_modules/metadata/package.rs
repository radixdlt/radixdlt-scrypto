use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi, LockFlags};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::data::ScryptoValue;

#[derive(ScryptoSbor, LegacyDescribe)]
struct MetadataSetEvent {
    key: String,
    value: String,
}

pub struct MetadataNativePackage;
impl MetadataNativePackage {
    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set(receiver, input, api)
            }
            METADATA_GET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::get(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn set<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataSetInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver,
            NodeModuleId::Metadata,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let mut substate = api.kernel_get_substate_ref_mut(handle)?;
        let metadata = substate.metadata();
        metadata
            .metadata
            .insert(input.key.clone(), input.value.clone());

        api.emit_event(MetadataSetEvent {
            key: input.key,
            value: input.value,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataGetInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver,
            NodeModuleId::Metadata,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let substate_ref = api.kernel_get_substate_ref(handle)?;
        let metadata = substate_ref.metadata();

        let rtn = metadata.metadata.get(&input.key).cloned();

        Ok(IndexedScryptoValue::from_typed(&rtn))
    }
}
