# This transaction manifest shows how a mintable non-fungible resource may be minted through the 
# transaction manifest. Most mint operations will typically require you to produce a badge before 
# being allowed to mint a resource. This example is no different. In this example, there is a minter
# badge which we have in our account which allows us to mint this resource

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all 
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component - Currently, the account component does not have
# a method for creating a proof and locking a fee at the same time. Therefore, locking a fee will be
# its own method call and creating a proof will be its own method call.
CALL_METHOD 
    ComponentAddress("${account_component_address}") 
    "lock_fee"
    Decimal("10");

# We have a badge in our account component which allows us to mint this resource. So, we create a 
# proof from this badge which will allow us to mint the resource
CALL_METHOD
    ComponentAddress("${account_component_address}")
    "create_proof_by_amount"
    ResourceAddress("${minter_badge_resource_address}")
    Decimal("1");

# Minting a single non-fungible token from the resource. This non-fungible token has no data (this
# is what the 5c2100 bit means, it's the SBOR representation of an empty struct) and has an id that
# is user specified.
MINT_NON_FUNGIBLE
    ResourceAddress("${mintable_resource_address}") 
    Map<NonFungibleLocalId, Tuple>(
        NonFungibleLocalId("${non_fungible_local_id}"), 
        Tuple(
            Tuple("Hello World", Decimal("12")),        # The immutable part of the data    
            Tuple(12u8, 19u128)                         # The mutable part of the data
        )
    );

# Depositing the entirety of the newly minted tokens into out account
CALL_METHOD
    ComponentAddress("${account_component_address}") 
    "deposit_batch"
    Expression("ENTIRE_WORKTOP");