TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 1.0527559481 XRD
├─ Network execution: 0.37136615 XRD, 7427323 execution cost units
├─ Network finalization: 0.2360239 XRD, 4720478 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0.4453658981 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 7
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: LockFeeEvent {
     amount: Decimal("5000"),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("585bbc15a104f152f15ae46fee1a3a0b9b93c5cafae5cb9617d7fcebdde7")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("5867b756469d5ab7ebe68f5f19280d627aac230ba8006a715bd18d7bb1ba")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58153f41f8a9533e3af933b0e2ba12bee04038ac52c6b9715fa5fe0dc0ef")),
   }
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: PayFeeEvent {
     amount: Decimal("1.0527559481"),
   }
├─ Emitter: Method { node: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel, module_id: Main }
   Event: DepositEvent {
     amount: Decimal("0.52637797405"),
   }
└─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: BurnFungibleResourceEvent {
     amount: Decimal("0.52637797405"),
   }

STATE UPDATES: 11 entities
├─ consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(2)
       Value: UNLOCKED ConsensusManagerValidatorRewardsFieldPayload::V1(
         ValidatorRewardsSubstate {
           proposer_rewards: {
             0u8 => Decimal("8.1331832781975"),
           },
           rewards_vault: Vault(Own("internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel")),
         },
       )
├─ transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2 across 2 partitions
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED TransactionTrackerSubstate::V1(
         TransactionTrackerSubstateV1 {
           start_epoch: 1u64,
           start_partition: 65u8,
           partition_range_start_inclusive: 65u8,
           partition_range_end_inclusive: 255u8,
           epochs_per_partition: 100u64,
         },
       )
  └─ Partition(65): 1 change
    └─ Set: Hash(hex("f2ba53acffd07309aaf2813ecdd81b7c70e604ceb04baaba0360d569ecb9eae1"))
       Value: UNLOCKED TransactionStatus::V1(
         TransactionStatusV1::CommittedSuccess,
       )
├─ component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED Faucet {
         vault: Vault(Own("internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u")),
         transactions: KeyValueStore(Own("internal_keyvaluestore_sim1krn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3p54gv8")),
       }
├─ internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("99999999999999967.46726688721")),
       )
├─ component_sim1cr7guww2kc22r6vnk8ffep9sv2aphp0mg6hdngg8x2shzf2xn90zmw across 6 partitions
  ├─ Partition(3): 1 change
    └─ Set: Field(0)
       Value: LOCKED ComponentRoyaltyAccumulatorFieldPayload::V1(
         ComponentRoyaltySubstate {
           royalty_vault: Vault(Own("internal_vault_sim1tpdmc9dpqnc49u26u3h7ux36pwde83w2ltjuh9sh6l7whh08nzwwtm")),
         },
       )
  ├─ Partition(4): 3 changes
    ├─ Set: "method_with_no_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Usd(
           Decimal("6"),
         ),
       )
    ├─ Set: "method_with_xrd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Free,
       )
    └─ Set: "method_with_usd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Xrd(
           Decimal("16"),
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 6 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoyaltiesBp {
       }
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z")),
               blueprint_name: "RoyaltiesBp",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Royalty => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ internal_vault_sim1tpdmc9dpqnc49u26u3h7ux36pwde83w2ltjuh9sh6l7whh08nzwwtm across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ component_sim1cr6wkdave3fx5vkf7lmpmgx3yaucurjup5vlxy625vt8vw05jchx45 across 6 partitions
  ├─ Partition(3): 1 change
    └─ Set: Field(0)
       Value: LOCKED ComponentRoyaltyAccumulatorFieldPayload::V1(
         ComponentRoyaltySubstate {
           royalty_vault: Vault(Own("internal_vault_sim1tpnmw4jxn4dt06lx3a03j2qdvfa2cgct4qqx5u2m6xxhhvd6nvnhsz")),
         },
       )
  ├─ Partition(4): 3 changes
    ├─ Set: "method_with_no_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Usd(
           Decimal("6"),
         ),
       )
    ├─ Set: "method_with_xrd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Free,
       )
    └─ Set: "method_with_usd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Xrd(
           Decimal("16"),
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 6 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoyaltiesBp {
       }
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z")),
               blueprint_name: "RoyaltiesBp",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Royalty => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ internal_vault_sim1tpnmw4jxn4dt06lx3a03j2qdvfa2cgct4qqx5u2m6xxhhvd6nvnhsz across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ component_sim1cp6hfzrywgcv9ffwtdhs7lczul27vkscacekxdmpm7zjzyrmwlppa3 across 6 partitions
  ├─ Partition(3): 1 change
    └─ Set: Field(0)
       Value: LOCKED ComponentRoyaltyAccumulatorFieldPayload::V1(
         ComponentRoyaltySubstate {
           royalty_vault: Vault(Own("internal_vault_sim1tq2n7s0c49fnuwhexwcw9wsjhmsyqw9v2trtju2l5hlqms80p3kycs")),
         },
       )
  ├─ Partition(4): 3 changes
    ├─ Set: "method_with_no_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Usd(
           Decimal("6"),
         ),
       )
    ├─ Set: "method_with_xrd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Free,
       )
    └─ Set: "method_with_usd_package_royalty"
       Value: UNLOCKED ComponentRoyaltyMethodAmountEntryPayload::V1(
         RoyaltyAmount::Xrd(
           Decimal("16"),
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 6 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_setter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_locker_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Royalty, key: RoleKey("royalty_claimer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoyaltiesBp {
       }
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z")),
               blueprint_name: "RoyaltiesBp",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Royalty => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ internal_vault_sim1tq2n7s0c49fnuwhexwcw9wsjhmsyqw9v2trtju2l5hlqms80p3kycs across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
└─ internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("16.266366556395")),
       )

OUTPUTS: 4
├─ Unit
├─ Reference("component_sim1cr7guww2kc22r6vnk8ffep9sv2aphp0mg6hdngg8x2shzf2xn90zmw")
├─ Reference("component_sim1cr6wkdave3fx5vkf7lmpmgx3yaucurjup5vlxy625vt8vw05jchx45")
└─ Reference("component_sim1cp6hfzrywgcv9ffwtdhs7lczul27vkscacekxdmpm7zjzyrmwlppa3")

BALANCE CHANGES: 2
├─ Vault: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: -1.0527559481
└─ Vault: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: 0.52637797405

NEW ENTITIES: 3
├─ Component: component_sim1cr7guww2kc22r6vnk8ffep9sv2aphp0mg6hdngg8x2shzf2xn90zmw
├─ Component: component_sim1cr6wkdave3fx5vkf7lmpmgx3yaucurjup5vlxy625vt8vw05jchx45
└─ Component: component_sim1cp6hfzrywgcv9ffwtdhs7lczul27vkscacekxdmpm7zjzyrmwlppa3