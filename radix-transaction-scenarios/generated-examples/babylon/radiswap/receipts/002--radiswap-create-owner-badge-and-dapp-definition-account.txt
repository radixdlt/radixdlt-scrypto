TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 1.13186320354 XRD
├─ Network execution: 0.3535163 XRD, 7070326 execution cost units
├─ Network finalization: 0.21777715 XRD, 4355543 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0.56056975354 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 14
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: LockFeeEvent {
     amount: Decimal("5000"),
   }
├─ Emitter: Method { node: resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n, module_id: Main }
   Event: MintNonFungibleResourceEvent {
     ids: [
       NonFungibleLocalId("#1#"),
     ],
   }
├─ Emitter: Method { node: resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("9834a6938ac707c0a2bc9a7a45db175e0a0f3fe8f62c9966b332ee3107b3")),
   }
├─ Emitter: Method { node: internal_vault_sim1nq62dyu2curupg4unfaytkchtc9q70lg7ckfje4nxthrzpan8fsqtu, module_id: Main }
   Event: DepositEvent {
     ids: [
       NonFungibleLocalId("#1#"),
     ],
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Main }
   Event: DepositEvent::NonFungible(
     ResourceAddress(Reference("resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n")),
     [
       NonFungibleLocalId("#1#"),
     ],
   )
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "account_type",
     value: GenericMetadataValue::String(
       "dapp definition",
     ),
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "name",
     value: GenericMetadataValue::String(
       "Radiswap dApp Definition",
     ),
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "description",
     value: GenericMetadataValue::String(
       "[EXAMPLE] The Radiswap dApp definition account",
     ),
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "tags",
     value: GenericMetadataValue::StringArray(
       [
         "dex",
         "pool",
         "radiswap",
       ],
     ),
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "info_url",
     value: GenericMetadataValue::Url(
       Url("https://radiswap.radixdlt.com/"),
     ),
   }
├─ Emitter: Method { node: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "claimed_websites",
     value: GenericMetadataValue::OriginArray(
       [
         Origin("https://radiswap.radixdlt.com"),
       ],
     ),
   }
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: PayFeeEvent {
     amount: Decimal("1.13186320354"),
   }
├─ Emitter: Method { node: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel, module_id: Main }
   Event: DepositEvent {
     amount: Decimal("0.56593160177"),
   }
└─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: BurnFungibleResourceEvent {
     amount: Decimal("0.56593160177"),
   }

STATE UPDATES: 8 entities
├─ consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(2)
       Value: UNLOCKED ConsensusManagerValidatorRewardsFieldPayload::V1(
         ValidatorRewardsSubstate {
           proposer_rewards: {
             0u8 => Decimal("0.6920123973275"),
           },
           rewards_vault: Vault(Own("internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel")),
         },
       )
├─ transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2 across 2 partitions
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED TransactionTrackerSubstate::V1(
         TransactionTrackerSubstateV1 {
           start_epoch: 1u64,
           start_partition: 65u8,
           partition_range_start_inclusive: 65u8,
           partition_range_end_inclusive: 255u8,
           epochs_per_partition: 100u64,
         },
       )
  └─ Partition(65): 1 change
    └─ Set: Hash(hex("155ab7fbb43cd2993a4027ab8fa5fbcf961be8f3dcdc589109f0231e32b159f1"))
       Value: UNLOCKED TransactionStatus::V1(
         TransactionStatusV1::CommittedSuccess,
       )
├─ component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED Faucet {
         vault: Vault(Own("internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u")),
         transactions: KeyValueStore(Own("internal_keyvaluestore_sim1krn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3p54gv8")),
       }
├─ internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("99999999999999997.23195041069")),
       )
├─ resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n across 7 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "info_url"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://radiswap.radixdlt.com/"),
         ),
       )
    ├─ Set: "name"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Radiswap - dApp Owner Badge",
         ),
       )
    ├─ Set: "description"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "[EXAMPLE] The owner badge for the Radiswap dApp and associated entities",
         ),
       )
    └─ Set: "tags"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "dex",
             "pool",
             "radiswap",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 3 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Integer,
       )
    ├─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
    └─ Set: Field(2)
       Value: LOCKED NonFungibleResourceManagerTotalSupplyFieldPayload::V1(
         Decimal("1"),
       )
  ├─ Partition(65): 1 change
    └─ Set: NonFungibleLocalId("#1#")
       Value: UNLOCKED Unit
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "track_total_supply",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd across 6 partitions
  ├─ Partition(2): 8 changes
    ├─ Set: "claimed_websites"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::OriginArray(
           [
             Origin("https://radiswap.radixdlt.com"),
           ],
         ),
       )
    ├─ Set: "info_url"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://radiswap.radixdlt.com/"),
         ),
       )
    ├─ Set: "name"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Radiswap dApp Definition",
         ),
       )
    ├─ Set: "owner_badge"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::NonFungibleLocalId(
           NonFungibleLocalId("[51799eeb70a3a5058459a50bddd1ad728b1c0d5336403bf6bdcd691d37ee]"),
         ),
       )
    ├─ Set: "description"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "[EXAMPLE] The Radiswap dApp definition account",
         ),
       )
    ├─ Set: "owner_keys"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::PublicKeyHashArray(
           [
             PublicKeyHash::Ed25519(
               Ed25519PublicKeyHash(hex("799eeb70a3a5058459a50bddd1ad728b1c0d5336403bf6bdcd691d37ee")),
             ),
           ],
         ),
       )
    ├─ Set: "account_type"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "dapp definition",
         ),
       )
    └─ Set: "tags"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "dex",
             "pool",
             "radiswap",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5")),
                     local_id: NonFungibleLocalId("[799eeb70a3a5058459a50bddd1ad728b1c0d5336403bf6bdcd691d37ee]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::Object,
         },
       )
  ├─ Partition(6): 1 change
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("securify") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5")),
                   local_id: NonFungibleLocalId("[799eeb70a3a5058459a50bddd1ad728b1c0d5336403bf6bdcd691d37ee]"),
                 },
               ),
             ),
           ),
         ),
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED AccountDepositRuleFieldPayload::V1(
         AccountSubstate {
           default_deposit_rule: DefaultDepositRule::Accept,
         },
       )
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6")),
               blueprint_name: "Account",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  └─ Partition(65): 1 change
    └─ Set: ResourceAddress(Reference("resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n"))
       Value: UNLOCKED AccountResourceVaultEntryPayload::V1(
         Vault(Own("internal_vault_sim1nq62dyu2curupg4unfaytkchtc9q70lg7ckfje4nxthrzpan8fsqtu")),
       )
├─ internal_vault_sim1nq62dyu2curupg4unfaytkchtc9q70lg7ckfje4nxthrzpan8fsqtu across 3 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED NonFungibleVaultBalanceFieldPayload::V1(
         LiquidNonFungibleVault(Decimal("1")),
       )
  └─ Partition(65): 1 change
    └─ Set: NonFungibleLocalId("#1#")
       Value: NonFungibleVaultNonFungibleEntryPayload::V1(
         Unit,
       )
└─ internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("1.384024794655")),
       )

OUTPUTS: 9
├─ Unit
├─ Tuple(
     Reference("resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n"),
     Own("internal_component_sim1lzcufc72t53tzusuzwewmdesvmcpuek3ckuj82t9ylfy36r3zlgzfr"),
   )
├─ Unit
├─ Unit
├─ Unit
├─ Unit
├─ Unit
├─ Unit
└─ Unit

BALANCE CHANGES: 3
├─ Vault: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: -1.13186320354
├─ Vault: internal_vault_sim1nq62dyu2curupg4unfaytkchtc9q70lg7ckfje4nxthrzpan8fsqtu
   ResAddr: resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n
   Change: +{#1#}, -{}
└─ Vault: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: 0.56593160177

NEW ENTITIES: 2
└─ Component: account_sim129uea6ms5wjstpze559am5ddw293cr2nxeqrha4ae4536dlw5x8whd
└─ Resource: resource_sim1ngtf8aw0v8l0wsy0clun8j7wggkmdy5gc7zhyrdy0m4sw98zny9y7n