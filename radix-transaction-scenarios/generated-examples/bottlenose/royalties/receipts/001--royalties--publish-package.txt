TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 31.48206911469 XRD
├─ Network execution: 0.6302333 XRD, 12604666 execution cost units
├─ Network finalization: 0.0783874 XRD, 1567748 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 30.77344841469 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 5
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: LockFeeEvent {
     amount: Decimal("5000"),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58319d48c42a1cdd2c6e4aecdbda045d509046a719020c81ef855f6f4ad1")),
   }
├─ Emitter: Method { node: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u, module_id: Main }
   Event: PayFeeEvent {
     amount: Decimal("31.48206911469"),
   }
├─ Emitter: Method { node: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel, module_id: Main }
   Event: DepositEvent {
     amount: Decimal("15.741034557345"),
   }
└─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: BurnFungibleResourceEvent {
     amount: Decimal("15.741034557345"),
   }

STATE UPDATES: 7 entities
├─ consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(2)
       Value: UNLOCKED ConsensusManagerValidatorRewardsFieldPayload::V1(
         ValidatorRewardsSubstate {
           proposer_rewards: {
             0u8 => Decimal("7.8705172786725"),
           },
           rewards_vault: Vault(Own("internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel")),
         },
       )
├─ transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2 across 2 partitions
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED TransactionTrackerSubstate::V1(
         TransactionTrackerSubstateV1 {
           start_epoch: 1u64,
           start_partition: 65u8,
           partition_range_start_inclusive: 65u8,
           partition_range_end_inclusive: 255u8,
           epochs_per_partition: 100u64,
         },
       )
  └─ Partition(65): 1 change
    └─ Set: Hash(hex("4e4538d8d5304885b48f3d6803f4686cdfc55d83b645b3444119bf34e4ac7177"))
       Value: UNLOCKED TransactionStatus::V1(
         TransactionStatusV1::CommittedSuccess,
       )
├─ component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED Faucet {
         vault: Vault(Own("internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u")),
         transactions: KeyValueStore(Own("internal_keyvaluestore_sim1krn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3p54gv8")),
       }
├─ internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("99999999999999968.51793088531")),
       )
├─ package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z across 11 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(ecbe879c427030384b968022258f6e9375bc14eb52896da5795f759fb94d2254)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoyaltiesBp",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoyaltiesBp_new_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalRoyaltiesBp",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoyaltiesBp_method_with_no_package_royalty_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoyaltiesBp_method_with_xrd_package_royalty_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoyaltiesBp_method_with_usd_package_royalty_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::None,
                         "RoyaltiesBp",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tqce6jxy9gwd6trwftkdhksyt4gfq348rypqeq00s40k7jk3z5r2ke")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoyaltiesBp", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: (Hidden as longer than 1024 bytes. Hash: 74a6c4b3f9b15d701827a92c74e0ceca4b0a907308156afaa272997a0470d50e)
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoyaltiesBp", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoyaltiesBp", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Enabled(
           {
             "new" => RoyaltyAmount::Free,
             "method_with_no_package_royalty" => RoyaltyAmount::Free,
             "method_with_xrd_package_royalty" => RoyaltyAmount::Xrd(
               Decimal("31"),
             ),
             "method_with_usd_package_royalty" => RoyaltyAmount::Usd(
               Decimal("1"),
             ),
           },
         ),
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoyaltiesBp", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("bdcb205bff57391fcc5568a8900b95123ae9e0a28203ec930a55559c69015a58"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::ScryptoV1,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("bdcb205bff57391fcc5568a8900b95123ae9e0a28203ec930a55559c69015a58"))
       Value: (Hidden as longer than 1024 bytes. Hash: de3c9f86e4db8b0759a09610529118627d9f46a0ae246218053528b4255a8597)
  ├─ Partition(71): 1 change
    └─ Set: CodeHash(hex("bdcb205bff57391fcc5568a8900b95123ae9e0a28203ec930a55559c69015a58"))
       Value: (Hidden as longer than 1024 bytes. Hash: 7fee0636b2fb568acf1024fa3f49093f60ff3b4d72c99d127b133953f7b2463d)
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ internal_vault_sim1tqce6jxy9gwd6trwftkdhksyt4gfq348rypqeq00s40k7jk3z5r2ke across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
└─ internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("15.741034557345")),
       )

OUTPUTS: 3
├─ Unit
├─ None
└─ Reference("package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z")

BALANCE CHANGES: 2
├─ Vault: internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: -31.48206911469
└─ Vault: internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel
   ResAddr: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
   Change: 15.741034557345

NEW ENTITIES: 1
└─ Package: package_sim1p4qz8edl2w0t5mzwt6zcq0nfnc0ax9rkfawnmsg0s974hxcsggr29z