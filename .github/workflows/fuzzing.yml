name: Fuzzing
run-name: Fuzzing target=${{ github.event.inputs.fuzz_target }} input=${{ github.event.inputs.fuzz_input_mode }} duration=${{ github.event.inputs.duration_hours }}h branch=${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      fuzz_target:
        type: choice
        description: 'Fuzz target'
        required: true
        options:
          - transaction
          - wasm_instrument
          - decimal
          - parse_decimal
          - role_assignment
          - royalty_state
          - system
          - sbor

      duration_hours:
        description: 'Fuzzing duration [h]'
        required: true
        default: 6
      timeout:
        description: 'AFL timeout [ms]'
        required: true
        default: 1000
      fuzz_input_mode:
        type: choice
        description: 'Fuzz input data generation mode'
        required: true
        options:
          - empty
          - minimize
          - unique
          - raw
      watch_interval:
        description: 'Check fuzzing status interval [s]'
        required: true
        default: 300
      code_coverage_corpus_mode:
        type: choice
        description: 'Corpus mode for code coverage'
        required: true
        options:
          - cmin
          - full
          - none

env:
  CARGO_TERM_COLOR: always

jobs:
  fuzz_afl:
    name: Fuzz ${{ github.event.inputs.fuzz_target }} (AFL)
    runs-on: fuzzing
    # set timeout to 7days
    timeout-minutes: 10080

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - run: |
        sudo apt-get update -qq
        sudo apt-get install parallel screen build-essential llvm cmake -y

    - name: Install nextest
      uses: taiki-e/install-action@nextest

    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown

    - name: Add wasm target (nightly)
      run: rustup +nightly target add wasm32-unknown-unknown

    - name: Setup AFL
      working-directory: fuzz-tests
      run: |
        ./install_afl.sh
        ./fuzz.sh afl machine-init

    - name: Setup code coverage tools
      run: |
        rustup component add llvm-tools-preview
        cargo install grcov

    - name: Build AFL
      working-directory: fuzz-tests
      run: |
        ./fuzz.sh afl build ${{ github.event.inputs.fuzz_target }}

    - name: Generate input for AFL
      working-directory: fuzz-tests
      run: |
        ./fuzz.sh generate-input ${{ github.event.inputs.fuzz_target }} ${{ github.event.inputs.fuzz_input_mode }} ${{ github.event.inputs.timeout }}

    - name: Start AFL
      working-directory: fuzz-tests
      run: |
        # scale=0 - get rid of fractional part
        # dividing by 1 because 'scale' works only for division ;)
        # Using floating arithmetics to allow providing fractions of hours (for test purposes)
        SECONDS=$(echo "scale=0; ${{ github.event.inputs.duration_hours }} * 60 * 60 / 1" | bc)
        ./afl.sh run ${{ github.event.inputs.fuzz_target }} $SECONDS all ${{ github.event.inputs.timeout }}

    - name: Watch AFL
      working-directory: fuzz-tests
      run: |
        ./afl.sh watch ${{ github.event.inputs.fuzz_target }} ${{ github.event.inputs.watch_interval }}

    - name: Quit AFL
      if: failure() || cancelled()
      working-directory: fuzz-tests
      run: |
        ./afl.sh quit ${{ github.event.inputs.fuzz_target }}

    - name: Process AFL results (if success)
      if: success()
      working-directory: fuzz-tests
      run: |
        # it is expected to generate afl/crash_summary.txt
        ./process_fuzz_results.sh afl/${{ github.event.inputs.fuzz_target }}

    - name: Process AFL results (if not success)
      if: failure() || cancelled()
      working-directory: fuzz-tests
      run: |
        # it is expected to generate afl/crash_summary.txt
        # Specify crash inspection timeout to workaround following issue:
        #   "Runner fuzzing-runner did not respond to a cancelation request with 00:05:00"
        # Setting timeout to 270s, remaining 30s is a safety margin
        ./process_fuzz_results.sh afl/${{ github.event.inputs.fuzz_target }} 270

    - name: Generate summary
      if: success() || failure() || cancelled()
      working-directory: fuzz-tests
      run: |
        COMMIT=$(git rev-parse --short HEAD)
        echo -e \
        "## Input params:\n \
        ${{ toJSON(github.event.inputs) }}\n \
        ## Repo:\n \
        revision: [${{ github.repository }} - $COMMIT](${{ github.server_url }}/${{ github.repository }}/commit/$COMMIT)\n \
        ## Summary:\n \
        \n\`\`\`\n\
        $(cargo afl whatsup -s -d afl/${{ github.event.inputs.fuzz_target }} | awk '/Fuzzers alive/ {seen=1} seen {print}') \
        \n\`\`\`\n \
        ## Status:\n \
        \n\`\`\`\n\
        $(cat afl/sessions_info) \
        \n\`\`\`\n \
        ## Details:\n \
        <details>\n
          <summary>More details</summary>\n
        \n\`\`\`\n\
        $(cargo afl whatsup -d afl/${{ github.event.inputs.fuzz_target }}) \
        \n\`\`\`\n
        </details>\n" > afl/summary
        cat afl/summary >> $GITHUB_STEP_SUMMARY

        echo -e \
        "## Crash summary:\n\
        \n\`\`\`\n\
        $(cat afl/crash_summary.txt) \
        \n\`\`\`\n" >> $GITHUB_STEP_SUMMARY

        # Archive all fuzzing results except 'queue' folder files (which might be huge),
        # but include 'queue' subfolders ('.state/...'), which keeps links to 'queue' files that causes some
        # problematic behaviour, eg. non-deterministic behaviour.
        # (therefore following symbolic links with "-h" when using tar command below")
        #
        # AFL folder structure
        #  ├── transaction_0_fast
        #  │   ├── .cur_input
        #  │   ├── .synced
        #  │   │   ├── transaction_1_explore
        #  │   │   ├── transaction_1_explore.last
        #  │   │   ├── transaction_3_line
        #  │   │   └── transaction_3_line.last
        #  │   ├── cmdline
        #  │   ├── crashes
        #  │   │   ├── README.txt
        #  │   │   ├── id:000000,sig:06,src:000001,time:22669,execs:2552,op:havoc,rep:8
        #  │   │   ├── id:000001,sig:06,src:000001,time:24383,execs:2759,op:havoc,rep:16
        #  │   │   └── id:000712,sig:06,src:001455+000563,time:1794800,execs:790180,op:splice,rep:2
        #  │   ├── fuzz_bitmap
        #  │   ├── fuzzer_setup
        #  │   ├── fuzzer_stats
        #  │   ├── hangs
        #  │   ├── plot_data
        #  │   └── queue
        #  │       ├── .state
        #  │       │   ├── auto_extras
        #  │       │   ├── deterministic_done
        #  │       │   ├── redundant_edges
        #  │       │   │   ├── id:000000,time:0,execs:0,orig:manifest_fa614507e3f2d2ee67046d7d27e3c9503a8b63889b9ef1bdccea6e871ed7b6b6.raw
        #  │       │   │   └── id:001686,src:001448,time:1779901,execs:780173,op:havoc,rep:16
        #  │       │   └── variable_behavior
        #  │       │       ├── id:000000,time:0,execs:0,orig:manifest_fa614507e3f2d2ee67046d7d27e3c9503a8b63889b9ef1bdccea6e871ed7b6b6.raw -> ../../id:000000,time:0,execs:0,orig:manifest_fa614507e3f2d2ee67046d7d27e3c9503a8b63889b9ef1bdccea6e871ed7b6b6.raw
        #  │       │       └── id:001687,src:001448,time:1784621,execs:783702,op:havoc,rep:8,+cov -> ../../id:001687,src:001448,time:1784621,execs:783702,op:havoc,rep:8,+cov
        #  │       ├── id:000000,time:0,execs:0,orig:manifest_fa614507e3f2d2ee67046d7d27e3c9503a8b63889b9ef1bdccea6e871ed7b6b6.raw
        #  │       ├── id:000001,time:0,execs:0,orig:manifest_e5fb198d9f343da6e6f5c2dbef319913c713bc4cffd712ec97cb3da0c29b5f4c.raw
        #  │       └── id:001687,src:001448,time:1784621,execs:783702,op:havoc,rep:8,+cov
        #  ├── transaction_1_explore
        find afl -type f ! -path "*/queue/*" | tee list
        find afl -path "*/.state/*" | tee -a list

        # Archive panic summary files (useful when grouping crashes by panic type)
        find local_* -type f -name "*.panic" | tee -a list
        echo "archive results"
        tar -hczf fuzz_results.tgz -T list

    - name: Get code coverage
      if: success()
      working-directory: fuzz-tests
      run: |
        if [ "${{ github.event.inputs.code_coverage_corpus_mode}}" != "none" ] ; then
          ./get-coverage-data.sh ${{ github.event.inputs.fuzz_target }} ${{ github.event.inputs.code_coverage_corpus_mode }}
          ./get-coverage-report.sh
          cd target/coverage
          tar -czf ../../coverage.tgz html
        fi

    - name: Upload fuzz results
      if: success() || failure() || cancelled()
      uses: actions/upload-artifact@v3
      with:
        name: fuzz_results.tgz
        path: |
          fuzz-tests/fuzz_results.tgz

    - name: Upload code coverage report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: coverage.tgz
        if-no-files-found: ignore
        path: |
          fuzz-tests/coverage.tgz
