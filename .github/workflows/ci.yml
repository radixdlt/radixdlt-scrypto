name: CI

on:
  push:
    branches:
      - main
      - develop
      - docs
      - alphanet
      - betanet
      - release/*
  pull_request:
    branches:
      - main
      - develop
      - docs
      - alphanet
      - betanet
      - release/*

env:
  CARGO_TERM_COLOR: always

jobs:
  cancel_running_workflows:
    name: Cancel running workflows
    runs-on: ubuntu-20.04
    steps:
      - name: cancel running workflows
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  check-code-format:
    name: Check code format
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      # TODO: switch to tag (here and below) once this revision is available within some tag (latest tag v1.1.0 does not include it)
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - uses: radixdlt/rust-cache@allow_registry_src_caching
      with:
        key: ${{ runner.os }}
        cache-directories: ~/.cargo/registry/src/**/librocksdb-sys-*
        workspaces: simulator
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang -y
      if: matrix.os == 'linux'
    - name: Install Scrypto toolchain
      run: cargo install --path ./simulator
    - name: Check format
      run: bash ./check.sh
  sbor-unit-tests:
    name: Run SBOR unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - name: Run tests
      run: cargo test
      working-directory: sbor
    - name: Run tests (no_std)
      run: cargo test --no-default-features --features alloc
      working-directory: sbor
    - name: Run derive tests
      run: cargo test
      working-directory: sbor-derive
  sbor-integration-tests:
    name: Run SBOR integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - name: Run tests
      run: cargo test
      working-directory: sbor-tests
    - name: Run tests (no_std)
      run: cargo test --no-default-features --features alloc
      working-directory: sbor-tests
    - name: Run bench
      run: cargo bench
      working-directory: sbor-tests
  scrypto-unit-tests:
    name: Run Scrypto unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - name: Run tests
      run: cargo test
      working-directory: scrypto
    - name: Run tests (no_std)
      run: cargo test --no-default-features --features alloc,prelude
      working-directory: scrypto
    - name: Run abi tests
      run: cargo test
      working-directory: scrypto-abi
    - name: Run derive tests
      run: cargo test
      working-directory: scrypto-derive
  scrypto-integration-tests:
    name: Run Scrypto integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - name: Run tests
      run: cargo test
      working-directory: scrypto-tests
    - name: Run tests with no_std
      run: cargo test --no-default-features --features alloc
      working-directory: scrypto-tests
  scrypto-examples:
    name: Run Scrypto examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Add wasm target (nightly)
      run: rustup +nightly target add wasm32-unknown-unknown
    - name: Build account
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: assets/blueprints/account
    - name: Build faucet
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: assets/blueprints/faucet
    - name: Build no-std
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/no-std
    - name: Build and test hello-world
      run: cargo build --target wasm32-unknown-unknown --release && cargo test --release
      working-directory: examples/hello-world
  radix-engine:
    name: Run Radix Engine tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run tests
      run: cargo test
      working-directory: radix-engine-derive
    - name: Run tests
      run: cargo test
      working-directory: radix-engine-interface
    - name: Run tests
      run: cargo test
      working-directory: radix-engine
  radix-engine-no-std:
    name: Run Radix Engine tests (no_std)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run tests
      run: cargo test --no-default-features --features alloc
      working-directory: radix-engine
  radix-engine-wasmer:
    name: Run Radix Engine tests with Wasmer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run tests
      run: cargo test --features wasmer
      working-directory: radix-engine
  radix-engine-bench:
    name: Run Radix Engine benchmarks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run bench
      run: cargo bench
      working-directory: radix-engine
  transaction:
    name: Run transaction tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [linux, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - name: Run tests
      run: cargo test
      working-directory: transaction
  simulator:
    name: Run CLI tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [k8s-linux-runner, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - uses: radixdlt/rust-cache@allow_registry_src_caching
      with:
        key: ${{ runner.os }}
        cache-directories: ~/.cargo/registry/src/**/librocksdb-sys-*
        workspaces: simulator
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Set LIBCLANG_PATH # See https://github.com/rust-lang/rust-bindgen/issues/1797
      if: runner.os == 'Windows'
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
    - name: Install dependencies
      if: runner.os == 'Windows'
      run: choco install llvm -y
    - name: Run tests
      run: bash ./tests/resim.sh
      working-directory: simulator
    - name: Run tests
      run: bash ./tests/manifest.sh
      working-directory: simulator

  # CLI tests splitted into 2 parts to reduce the CI time.
  simulator2:
    name: Run CLI tests - part 2
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [linux, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Setup Sccache for Rust compilation
      uses: metalbear-co/sccache-action@17192d82c6c41cc16d4e06b7681ab1b452690206
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: sccache-${{ runner.os }}-
        cache-to: sccache-${{ runner.os }}-${{ github.sha }}
    - uses: radixdlt/rust-cache@allow_registry_src_caching
      with:
        key: ${{ runner.os }}
        cache-directories: ~/.cargo/registry/src/**/librocksdb-sys-*
        workspaces: simulator
    - run: |
        sudo apt-get update -qq
        sudo apt-get install clang cmake m4 -y
      if: matrix.os == 'linux'
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Set LIBCLANG_PATH # See https://github.com/rust-lang/rust-bindgen/issues/1797
      if: runner.os == 'Windows'
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
    - name: Install dependencies
      if: runner.os == 'Windows'
      run: choco install llvm -y
    - name: Run tests
      run: bash ./tests/scrypto.sh
      working-directory: simulator
