window.SIDEBAR_ITEMS = {"attr":[["scrypto","Attribute that derives code to encode, decode and/or describe the struct or enum, using Scrypto data and schema model."]],"constant":[["ACCOUNT_BLUEPRINT",""],["ACCOUNT_PACKAGE","The address of the account package."],["BASIC_SBOR_V1_PAYLOAD_PREFIX",""],["CLOCK",""],["CLOCK_BLUEPRINT",""],["CUSTOM_TYPE_START","A custom type is an application defined type with special semantics."],["DEFAULT_BASIC_MAX_DEPTH",""],["ECDSA_SECP256K1_TOKEN","The ECDSA virtual resource address."],["EDDSA_ED25519_TOKEN","The ED25519 virtual resource address."],["EPOCH_MANAGER",""],["EPOCH_MANAGER_BLUEPRINT",""],["FAUCET_BLUEPRINT",""],["FAUCET_COMPONENT","The address of the faucet component, test network only."],["FAUCET_PACKAGE","The address of the faucet package."],["NON_FUNGIBLE_ID_MAX_LENGTH",""],["OPTION_VARIANT_NONE",""],["OPTION_VARIANT_SOME",""],["PACKAGE_BLUEPRINT",""],["RADIX_TOKEN","The XRD resource address."],["RESOURCE_MANAGER_BLUEPRINT",""],["RESULT_VARIANT_ERR",""],["RESULT_VARIANT_OK",""],["SYSTEM_TOKEN","The system token which allows access to system resources (e.g. setting epoch)"],["TRANSACTION_PROCESSOR_BLUEPRINT",""],["TYPE_ARRAY",""],["TYPE_BOOL",""],["TYPE_ENUM",""],["TYPE_I128",""],["TYPE_I16",""],["TYPE_I32",""],["TYPE_I64",""],["TYPE_I8",""],["TYPE_STRING",""],["TYPE_TUPLE",""],["TYPE_U128",""],["TYPE_U16",""],["TYPE_U32",""],["TYPE_U64",""],["TYPE_U8",""],["TYPE_UNIT",""]],"derive":[["AsRefStr","Converts enum variants to `&'static str`."],["AsStaticStr",""],["Decode","Derive code that decodes this data structure from a byte array."],["Display","Converts enum variants to strings."],["Encode","Derive code that encodes this data structure"],["EnumCount","Add a constant `usize` equal to the number of variants."],["EnumDiscriminants","Generate a new type with only the discriminant names."],["EnumIter","Creates a new type that iterates of the variants of an enum."],["EnumMessage","Add a verbose message to an enum variant."],["EnumProperty","Add custom properties to enum variants."],["EnumString","Converts strings to enum variants based on their name."],["EnumVariantNames","Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is an array of discriminant names."],["FromRepr","Add a function to enum that allows accessing variants by its discriminant"],["IntoStaticStr","Implements `From<MyEnum> for &'static str` on an enum."],["ToString","implements `std::string::ToString` on en enum"],["TypeId","Derive code that returns the type ID."]],"enum":[["AccessRule",""],["AccessRuleEntry",""],["AccessRuleKey",""],["AccessRuleNode",""],["AccessRulesChainMethod",""],["AccessRulesChainOffset",""],["AddressError","Represents an error in addressing."],["AuthZoneStackMethod",""],["AuthZoneStackOffset",""],["BucketMethod",""],["BucketOffset",""],["ClockFunction",""],["ClockMethod",""],["ClockOffset",""],["ComponentAddress","An instance of a blueprint, which lives in the ledger state."],["ComponentFunction",""],["ComponentMethod",""],["ComponentOffset",""],["DecodeError","Represents an error ocurred during decoding."],["EncodeError","Represents an error occurred during encoding."],["EpochManagerFunction",""],["EpochManagerMethod",""],["EpochManagerOffset",""],["FeeReserveOffset",""],["Fields","Represents the type info of struct fields."],["GlobalAddress",""],["GlobalOffset",""],["KeyValueStoreOffset",""],["Level","Represents the level of a log message."],["MetadataMethod",""],["MetadataOffset",""],["MintParams",""],["NativeFn",""],["NativeFunction",""],["NativeMethod",""],["NoCustomTypeId",""],["NoCustomValue",""],["NonFungibleId","Represents a key for a non-fungible resource"],["NonFungibleIdType","Represents type of non-fungible id"],["NonFungibleStoreOffset",""],["PackageAddress","A collection of blueprints, compiled and published as a single unit."],["PackageFunction",""],["PackageMethod",""],["PackageOffset",""],["ParseBlobError","Represents an error when parsing Blob."],["ParseBucketError","Represents an error when decoding bucket."],["ParseEcdsaSecp256k1PublicKeyError","Represents an error when parsing ECDSA public key from hex."],["ParseEcdsaSecp256k1SignatureError",""],["ParseEddsaEd25519PublicKeyError","Represents an error when parsing ED25519 public key from hex."],["ParseEddsaEd25519SignatureError",""],["ParseHashError","Represents an error when parsing hash."],["ParseNonFungibleAddressError","Represents an error when parsing non-fungible address."],["ParseNonFungibleIdError","Represents an error when decoding non-fungible id."],["ParseNonFungibleIdTypeError",""],["ParseProofError","Represents an error when decoding proof."],["ParseVaultError","Represents an error when decoding vault."],["ParsedScryptoInvocation",""],["ProofMethod",""],["ProofOffset",""],["ProofRule",""],["ProofValidationError","Represents an error when validating proof."],["ProofValidationMode","Specifies the validation mode that should be used for validating a `Proof`."],["PublicKey",""],["RENodeId",""],["RENodeType",""],["ResourceAddress","Represents a resource address."],["ResourceManagerFunction",""],["ResourceManagerMethod",""],["ResourceManagerOffset",""],["ResourceMethodAuthKey",""],["ResourceType","Represents the type of a resource."],["RoundingMode","Defines how rounding should be done."],["SborTypeId",""],["SborValue","Y is the CustomValue type. This is likely an enum, capturing all the custom values for the particular SBOR extension."],["ScryptoActor",""],["ScryptoInvocation",""],["ScryptoPackage",""],["ScryptoRENode",""],["ScryptoReceiver",""],["Signature",""],["SignatureWithPublicKey",""],["SoftCount",""],["SoftDecimal",""],["SoftResource",""],["SoftResourceOrNonFungible",""],["SoftResourceOrNonFungibleList",""],["SubstateOffset",""],["SystemAddress",""],["TimePrecision",""],["TransactionProcessorFunction",""],["Type","Represents a SBOR type."],["VaultMethod",""],["VaultMethodAuthKey",""],["VaultOffset",""],["WorktopMethod",""],["WorktopOffset",""]],"fn":[["basic_decode","Decode an instance of `T` from a slice."],["basic_encode","Encode a `T` into byte array."],["hash","Computes the hash digest of a message."],["require",""],["require_all_of",""],["require_amount",""],["require_any_of",""],["require_n_of",""],["scrypto_decode","Decodes a data structure from a byte array."],["scrypto_encode","Encodes a data structure into byte array."],["sha256","Computes the SHA-256 digest of a message."],["sha256_twice","Computes the double SHA-256 digest of a message."],["sha3","Computes the SHA3 digest of a message."],["traverse_any",""]],"macro":[["Debug","Derive macro generating an impl of the trait `Debug`."],["dec","Creates a `Decimal` from literals."],["format","Creates a `String` using interpolation of runtime expressions."],["vec","Creates a `Vec` containing the arguments."]],"mod":[["additional_attributes","Documentation for Additional Attributes"],["basic","SBOR basic, no custom types"],["btree_map","An ordered map based on a B-Tree."],["btree_set","An ordered set based on a B-Tree."],["codec","SBOR codec for core Rust types."],["constants","SBOR constants"],["decode","SBOR decode trait."],["decoder","SBOR decoding."],["encode","SBOR encode trait."],["encoder","SBOR encoding."],["fmt","Utilities for formatting and printing `String`s."],["hash_map","A hash map implemented with quadratic probing and SIMD lookup."],["hash_set","A hash set implemented as a `HashMap` where the value is `()`."],["path","SBOR paths."],["ptr","Manually manage memory through raw pointers."],["rust","A facade of Rust types."],["type_id","SBOR type ids."],["value","SBOR value model and any decoding/encoding."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["AccessRules",""],["AccessRulesAddAccessCheckInvocation",""],["AccessRulesGetLengthInvocation",""],["AccessRulesSetGroupAccessRuleInvocation",""],["AccessRulesSetGroupMutabilityInvocation",""],["AccessRulesSetMethodAccessRuleInvocation",""],["AccessRulesSetMethodMutabilityInvocation",""],["AuthZoneAssertAccessRuleInvocation",""],["AuthZoneClearInvocation",""],["AuthZoneCreateProofByAmountInvocation",""],["AuthZoneCreateProofByIdsInvocation",""],["AuthZoneCreateProofInvocation",""],["AuthZoneDrainInvocation",""],["AuthZonePopInvocation",""],["AuthZonePushInvocation",""],["BTreeMap","An ordered map based on a B-Tree."],["BTreeSet","An ordered set based on a B-Tree."],["Bech32Decoder","Represents a decoder which understands how to decode Scrypto addresses in Bech32."],["Bech32Encoder","Represents an encoder which understands how to encode Scrypto addresses in Bech32."],["Blob",""],["BlueprintAbi","Represents the ABI of a blueprint."],["Box","A pointer type for heap allocation."],["Bucket","Represents a transient resource container."],["BucketCreateProofInvocation",""],["BucketGetAmountInvocation",""],["BucketGetNonFungibleIdsInvocation",""],["BucketGetResourceAddressInvocation",""],["BucketPutInvocation",""],["BucketTakeInvocation",""],["BucketTakeNonFungiblesInvocation",""],["ClockCompareCurrentTimeInvocation",""],["ClockCreateInvocation",""],["ClockGetCurrentTimeInvocation",""],["ClockSetCurrentTimeInvocation",""],["ComponentClaimRoyaltyInvocation",""],["ComponentGlobalizeInvocation",""],["ComponentGlobalizeWithOwnerInvocation",""],["ComponentSetRoyaltyConfigInvocation",""],["Decimal","`Decimal` represents a 256 bit representation of a fixed-scale decimal number."],["Drain","A draining iterator for `String`."],["EcdsaSecp256k1PublicKey","Represents an ECDSA public key."],["EcdsaSecp256k1Signature","Represents an ECDSA signature."],["EcdsaSecp256k1Verifier","EcdsaSecp256k1 signature verifier."],["EddsaEd25519PublicKey","Represents an ED25519 public key."],["EddsaEd25519Signature","Represents an ED25519 signature."],["EddsaEd25519Verifier","EddsaEd25519 signature verifier."],["EpochManagerCreateInvocation",""],["EpochManagerGetCurrentEpochInvocation",""],["EpochManagerSetEpochInvocation",""],["Expression",""],["Fn","Represents a method/function."],["FromUtf16Error","A possible error value when converting a `String` from a UTF-16 byte slice."],["FromUtf8Error","A possible error value when converting a `String` from a UTF-8 byte vector."],["Hash","Represents a 32-byte hash digest."],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["I256","Provides safe integer arithmetic."],["IndexMap","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys."],["IndexSet","A hash set where the iteration order of the values is independent of their hash values."],["IndexedScryptoValue",""],["MetadataGetInvocation",""],["MetadataSetInvocation",""],["NativeFunctionIdent",""],["NativeMethodIdent",""],["NonFungibleAddress","Identifier for a non-fungible unit."],["NonZeroUsize","An integer that is known not to equal zero."],["PackageClaimRoyaltyExecutable",""],["PackageClaimRoyaltyInvocation",""],["PackagePublishInvocation",""],["PackagePublishWithOwnerInvocation",""],["PackageSetRoyaltyConfigExecutable",""],["PackageSetRoyaltyConfigInvocation",""],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["Proof","Represents a proof of owning some resource."],["ProofCloneInvocation",""],["ProofGetAmountInvocation",""],["ProofGetNonFungibleIdsInvocation",""],["ProofGetResourceAddressInvocation",""],["Rc","A single-threaded reference-counting pointer. ‘Rc’ stands for ‘Reference Counted’."],["Ref","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["RefMut","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],["ResourceManagerBucketBurnInvocation",""],["ResourceManagerBurnInvocation",""],["ResourceManagerCreateBucketInvocation",""],["ResourceManagerCreateInvocation",""],["ResourceManagerCreateVaultInvocation",""],["ResourceManagerCreateWithOwnerInvocation",""],["ResourceManagerGetNonFungibleInvocation",""],["ResourceManagerGetResourceTypeInvocation",""],["ResourceManagerGetTotalSupplyInvocation",""],["ResourceManagerMintInvocation",""],["ResourceManagerNonFungibleExistsInvocation",""],["ResourceManagerSetVaultAuthMutabilityInvocation",""],["ResourceManagerUpdateNonFungibleDataInvocation",""],["ResourceManagerUpdateVaultAuthInvocation",""],["RoyaltyConfig",""],["RoyaltyConfigBuilder",""],["SborPath","A series of indexes which describes some value in the sbor tree"],["SborPathBuf",""],["ScryptoFunctionIdent",""],["ScryptoMethodIdent",""],["String","A UTF-8–encoded, growable string."],["SubstateId",""],["Variant","Represents the type info of an enum variant."],["Vault",""],["VaultCreateProofByAmountInvocation",""],["VaultCreateProofByIdsInvocation",""],["VaultCreateProofInvocation",""],["VaultGetAmountInvocation",""],["VaultGetNonFungibleIdsInvocation",""],["VaultGetResourceAddressInvocation",""],["VaultLockFeeInvocation",""],["VaultPutInvocation",""],["VaultRecallInvocation",""],["VaultRecallNonFungiblesInvocation",""],["VaultTakeInvocation",""],["VaultTakeNonFungiblesInvocation",""],["Vec","A contiguous growable array type, written as `Vec<T>`, short for ‘vector’."],["VecDecoder","A `Decoder` abstracts the logic for decoding basic types."],["VecEncoder","An `Encoder` abstracts the logic for writing core types into a byte buffer."],["WorktopAssertContainsAmountInvocation",""],["WorktopAssertContainsInvocation",""],["WorktopAssertContainsNonFungiblesInvocation",""],["WorktopDrainInvocation",""],["WorktopPutInvocation",""],["WorktopTakeAllInvocation",""],["WorktopTakeAmountInvocation",""],["WorktopTakeNonFungiblesInvocation",""]],"trait":[["AddAssign","The addition assignment operator `+=`."],["AsStaticRef","A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code."],["BasicDecode",""],["BasicEncode",""],["BasicTypeId",""],["CustomTypeId",""],["CustomValueVisitor",""],["Debug","`?` formatting."],["Decode","A data structure that can be decoded from a byte array using SBOR."],["Decoder",""],["Encode","A data structure that can be serialized into a byte array using SBOR."],["Encoder",""],["EnumCount","A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`."],["EnumMessage","Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`."],["EnumProperty","`EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the only string literals are supported in attributes, the other methods will be implemented as additional attribute types become stabilized."],["FromPublicKey",""],["FromStr","Parse a value from a string"],["IntoEnumIterator","This trait designates that an `Enum` can be iterated over. It can be auto generated using `strum_macros` on your behalf."],["NonFungibleData","Represents the data structure of a non-fungible."],["ScryptoDecode",""],["ScryptoEncode",""],["ScryptoTypeId",""],["ToOwned","A generalization of `Clone` to borrowed data."],["ToString","A trait for converting a value to a `String`."],["TypeId","A SBOR type ID."],["VariantNames","A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`."]],"type":[["AuthZoneStackId",""],["BasicDecoder",""],["BasicEncoder",""],["BasicSborTypeId",""],["BasicSborValue",""],["BucketId",""],["ClockId",""],["ComponentId",""],["EpochManagerId",""],["FeeReserveId",""],["KeyValueStoreId",""],["LockHandle",""],["NonFungibleStoreId",""],["PackageId",""],["ProofId",""],["ResourceManagerId",""],["VaultId",""]]};